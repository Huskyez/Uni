/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-08")
public class Bilet implements org.apache.thrift.TBase<Bilet, Bilet._Fields>, java.io.Serializable, Cloneable, Comparable<Bilet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Bilet");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ZBOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ZborId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ClientId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TURISTI_FIELD_DESC = new org.apache.thrift.protocol.TField("turisti", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOCURI_FIELD_DESC = new org.apache.thrift.protocol.TField("locuri", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BiletStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BiletTupleSchemeFactory();

  public int ID; // required
  public int ZborId; // required
  public int ClientId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String turisti; // required
  public int locuri; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "ID"),
    ZBOR_ID((short)2, "ZborId"),
    CLIENT_ID((short)3, "ClientId"),
    TURISTI((short)4, "turisti"),
    LOCURI((short)5, "locuri");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ZBOR_ID
          return ZBOR_ID;
        case 3: // CLIENT_ID
          return CLIENT_ID;
        case 4: // TURISTI
          return TURISTI;
        case 5: // LOCURI
          return LOCURI;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ZBORID_ISSET_ID = 1;
  private static final int __CLIENTID_ISSET_ID = 2;
  private static final int __LOCURI_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ZBOR_ID, new org.apache.thrift.meta_data.FieldMetaData("ZborId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("ClientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TURISTI, new org.apache.thrift.meta_data.FieldMetaData("turisti", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCURI, new org.apache.thrift.meta_data.FieldMetaData("locuri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Bilet.class, metaDataMap);
  }

  public Bilet() {
  }

  public Bilet(
    int ID,
    int ZborId,
    int ClientId,
    java.lang.String turisti,
    int locuri)
  {
    this();
    this.ID = ID;
    setIDIsSet(true);
    this.ZborId = ZborId;
    setZborIdIsSet(true);
    this.ClientId = ClientId;
    setClientIdIsSet(true);
    this.turisti = turisti;
    this.locuri = locuri;
    setLocuriIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Bilet(Bilet other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ID = other.ID;
    this.ZborId = other.ZborId;
    this.ClientId = other.ClientId;
    if (other.isSetTuristi()) {
      this.turisti = other.turisti;
    }
    this.locuri = other.locuri;
  }

  public Bilet deepCopy() {
    return new Bilet(this);
  }

  @Override
  public void clear() {
    setIDIsSet(false);
    this.ID = 0;
    setZborIdIsSet(false);
    this.ZborId = 0;
    setClientIdIsSet(false);
    this.ClientId = 0;
    this.turisti = null;
    setLocuriIsSet(false);
    this.locuri = 0;
  }

  public int getID() {
    return this.ID;
  }

  public Bilet setID(int ID) {
    this.ID = ID;
    setIDIsSet(true);
    return this;
  }

  public void unsetID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field ID is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getZborId() {
    return this.ZborId;
  }

  public Bilet setZborId(int ZborId) {
    this.ZborId = ZborId;
    setZborIdIsSet(true);
    return this;
  }

  public void unsetZborId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ZBORID_ISSET_ID);
  }

  /** Returns true if field ZborId is set (has been assigned a value) and false otherwise */
  public boolean isSetZborId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ZBORID_ISSET_ID);
  }

  public void setZborIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ZBORID_ISSET_ID, value);
  }

  public int getClientId() {
    return this.ClientId;
  }

  public Bilet setClientId(int ClientId) {
    this.ClientId = ClientId;
    setClientIdIsSet(true);
    return this;
  }

  public void unsetClientId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLIENTID_ISSET_ID);
  }

  /** Returns true if field ClientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLIENTID_ISSET_ID);
  }

  public void setClientIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLIENTID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTuristi() {
    return this.turisti;
  }

  public Bilet setTuristi(@org.apache.thrift.annotation.Nullable java.lang.String turisti) {
    this.turisti = turisti;
    return this;
  }

  public void unsetTuristi() {
    this.turisti = null;
  }

  /** Returns true if field turisti is set (has been assigned a value) and false otherwise */
  public boolean isSetTuristi() {
    return this.turisti != null;
  }

  public void setTuristiIsSet(boolean value) {
    if (!value) {
      this.turisti = null;
    }
  }

  public int getLocuri() {
    return this.locuri;
  }

  public Bilet setLocuri(int locuri) {
    this.locuri = locuri;
    setLocuriIsSet(true);
    return this;
  }

  public void unsetLocuri() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCURI_ISSET_ID);
  }

  /** Returns true if field locuri is set (has been assigned a value) and false otherwise */
  public boolean isSetLocuri() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCURI_ISSET_ID);
  }

  public void setLocuriIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCURI_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetID();
      } else {
        setID((java.lang.Integer)value);
      }
      break;

    case ZBOR_ID:
      if (value == null) {
        unsetZborId();
      } else {
        setZborId((java.lang.Integer)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((java.lang.Integer)value);
      }
      break;

    case TURISTI:
      if (value == null) {
        unsetTuristi();
      } else {
        setTuristi((java.lang.String)value);
      }
      break;

    case LOCURI:
      if (value == null) {
        unsetLocuri();
      } else {
        setLocuri((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getID();

    case ZBOR_ID:
      return getZborId();

    case CLIENT_ID:
      return getClientId();

    case TURISTI:
      return getTuristi();

    case LOCURI:
      return getLocuri();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetID();
    case ZBOR_ID:
      return isSetZborId();
    case CLIENT_ID:
      return isSetClientId();
    case TURISTI:
      return isSetTuristi();
    case LOCURI:
      return isSetLocuri();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Bilet)
      return this.equals((Bilet)that);
    return false;
  }

  public boolean equals(Bilet that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ID = true;
    boolean that_present_ID = true;
    if (this_present_ID || that_present_ID) {
      if (!(this_present_ID && that_present_ID))
        return false;
      if (this.ID != that.ID)
        return false;
    }

    boolean this_present_ZborId = true;
    boolean that_present_ZborId = true;
    if (this_present_ZborId || that_present_ZborId) {
      if (!(this_present_ZborId && that_present_ZborId))
        return false;
      if (this.ZborId != that.ZborId)
        return false;
    }

    boolean this_present_ClientId = true;
    boolean that_present_ClientId = true;
    if (this_present_ClientId || that_present_ClientId) {
      if (!(this_present_ClientId && that_present_ClientId))
        return false;
      if (this.ClientId != that.ClientId)
        return false;
    }

    boolean this_present_turisti = true && this.isSetTuristi();
    boolean that_present_turisti = true && that.isSetTuristi();
    if (this_present_turisti || that_present_turisti) {
      if (!(this_present_turisti && that_present_turisti))
        return false;
      if (!this.turisti.equals(that.turisti))
        return false;
    }

    boolean this_present_locuri = true;
    boolean that_present_locuri = true;
    if (this_present_locuri || that_present_locuri) {
      if (!(this_present_locuri && that_present_locuri))
        return false;
      if (this.locuri != that.locuri)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ID;

    hashCode = hashCode * 8191 + ZborId;

    hashCode = hashCode * 8191 + ClientId;

    hashCode = hashCode * 8191 + ((isSetTuristi()) ? 131071 : 524287);
    if (isSetTuristi())
      hashCode = hashCode * 8191 + turisti.hashCode();

    hashCode = hashCode * 8191 + locuri;

    return hashCode;
  }

  @Override
  public int compareTo(Bilet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetZborId()).compareTo(other.isSetZborId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZborId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ZborId, other.ZborId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ClientId, other.ClientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTuristi()).compareTo(other.isSetTuristi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuristi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turisti, other.turisti);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocuri()).compareTo(other.isSetLocuri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocuri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locuri, other.locuri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Bilet(");
    boolean first = true;

    sb.append("ID:");
    sb.append(this.ID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ZborId:");
    sb.append(this.ZborId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ClientId:");
    sb.append(this.ClientId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("turisti:");
    if (this.turisti == null) {
      sb.append("null");
    } else {
      sb.append(this.turisti);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locuri:");
    sb.append(this.locuri);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BiletStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BiletStandardScheme getScheme() {
      return new BiletStandardScheme();
    }
  }

  private static class BiletStandardScheme extends org.apache.thrift.scheme.StandardScheme<Bilet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Bilet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID = iprot.readI32();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ZBOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ZborId = iprot.readI32();
              struct.setZborIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ClientId = iprot.readI32();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TURISTI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.turisti = iprot.readString();
              struct.setTuristiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCURI
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locuri = iprot.readI32();
              struct.setLocuriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Bilet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.ID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ZBOR_ID_FIELD_DESC);
      oprot.writeI32(struct.ZborId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
      oprot.writeI32(struct.ClientId);
      oprot.writeFieldEnd();
      if (struct.turisti != null) {
        oprot.writeFieldBegin(TURISTI_FIELD_DESC);
        oprot.writeString(struct.turisti);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOCURI_FIELD_DESC);
      oprot.writeI32(struct.locuri);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BiletTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BiletTupleScheme getScheme() {
      return new BiletTupleScheme();
    }
  }

  private static class BiletTupleScheme extends org.apache.thrift.scheme.TupleScheme<Bilet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Bilet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetID()) {
        optionals.set(0);
      }
      if (struct.isSetZborId()) {
        optionals.set(1);
      }
      if (struct.isSetClientId()) {
        optionals.set(2);
      }
      if (struct.isSetTuristi()) {
        optionals.set(3);
      }
      if (struct.isSetLocuri()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetID()) {
        oprot.writeI32(struct.ID);
      }
      if (struct.isSetZborId()) {
        oprot.writeI32(struct.ZborId);
      }
      if (struct.isSetClientId()) {
        oprot.writeI32(struct.ClientId);
      }
      if (struct.isSetTuristi()) {
        oprot.writeString(struct.turisti);
      }
      if (struct.isSetLocuri()) {
        oprot.writeI32(struct.locuri);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Bilet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.ID = iprot.readI32();
        struct.setIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ZborId = iprot.readI32();
        struct.setZborIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ClientId = iprot.readI32();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.turisti = iprot.readString();
        struct.setTuristiIsSet(true);
      }
      if (incoming.get(4)) {
        struct.locuri = iprot.readI32();
        struct.setLocuriIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

