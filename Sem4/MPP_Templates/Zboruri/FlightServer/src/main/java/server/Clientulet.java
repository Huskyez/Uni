/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-08")
public class Clientulet implements org.apache.thrift.TBase<Clientulet, Clientulet._Fields>, java.io.Serializable, Cloneable, Comparable<Clientulet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Clientulet");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUME_FIELD_DESC = new org.apache.thrift.protocol.TField("Nume", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ADRESA_FIELD_DESC = new org.apache.thrift.protocol.TField("Adresa", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ClientuletStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ClientuletTupleSchemeFactory();

  public int ID; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String Nume; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String Adresa; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "ID"),
    NUME((short)2, "Nume"),
    ADRESA((short)3, "Adresa");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NUME
          return NUME;
        case 3: // ADRESA
          return ADRESA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUME, new org.apache.thrift.meta_data.FieldMetaData("Nume", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADRESA, new org.apache.thrift.meta_data.FieldMetaData("Adresa", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Clientulet.class, metaDataMap);
  }

  public Clientulet() {
  }

  public Clientulet(
    int ID,
    java.lang.String Nume,
    java.lang.String Adresa)
  {
    this();
    this.ID = ID;
    setIDIsSet(true);
    this.Nume = Nume;
    this.Adresa = Adresa;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Clientulet(Clientulet other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ID = other.ID;
    if (other.isSetNume()) {
      this.Nume = other.Nume;
    }
    if (other.isSetAdresa()) {
      this.Adresa = other.Adresa;
    }
  }

  public Clientulet deepCopy() {
    return new Clientulet(this);
  }

  @Override
  public void clear() {
    setIDIsSet(false);
    this.ID = 0;
    this.Nume = null;
    this.Adresa = null;
  }

  public int getID() {
    return this.ID;
  }

  public Clientulet setID(int ID) {
    this.ID = ID;
    setIDIsSet(true);
    return this;
  }

  public void unsetID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field ID is set (has been assigned a value) and false otherwise */
  public boolean isSetID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNume() {
    return this.Nume;
  }

  public Clientulet setNume(@org.apache.thrift.annotation.Nullable java.lang.String Nume) {
    this.Nume = Nume;
    return this;
  }

  public void unsetNume() {
    this.Nume = null;
  }

  /** Returns true if field Nume is set (has been assigned a value) and false otherwise */
  public boolean isSetNume() {
    return this.Nume != null;
  }

  public void setNumeIsSet(boolean value) {
    if (!value) {
      this.Nume = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAdresa() {
    return this.Adresa;
  }

  public Clientulet setAdresa(@org.apache.thrift.annotation.Nullable java.lang.String Adresa) {
    this.Adresa = Adresa;
    return this;
  }

  public void unsetAdresa() {
    this.Adresa = null;
  }

  /** Returns true if field Adresa is set (has been assigned a value) and false otherwise */
  public boolean isSetAdresa() {
    return this.Adresa != null;
  }

  public void setAdresaIsSet(boolean value) {
    if (!value) {
      this.Adresa = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetID();
      } else {
        setID((java.lang.Integer)value);
      }
      break;

    case NUME:
      if (value == null) {
        unsetNume();
      } else {
        setNume((java.lang.String)value);
      }
      break;

    case ADRESA:
      if (value == null) {
        unsetAdresa();
      } else {
        setAdresa((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getID();

    case NUME:
      return getNume();

    case ADRESA:
      return getAdresa();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetID();
    case NUME:
      return isSetNume();
    case ADRESA:
      return isSetAdresa();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Clientulet)
      return this.equals((Clientulet)that);
    return false;
  }

  public boolean equals(Clientulet that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ID = true;
    boolean that_present_ID = true;
    if (this_present_ID || that_present_ID) {
      if (!(this_present_ID && that_present_ID))
        return false;
      if (this.ID != that.ID)
        return false;
    }

    boolean this_present_Nume = true && this.isSetNume();
    boolean that_present_Nume = true && that.isSetNume();
    if (this_present_Nume || that_present_Nume) {
      if (!(this_present_Nume && that_present_Nume))
        return false;
      if (!this.Nume.equals(that.Nume))
        return false;
    }

    boolean this_present_Adresa = true && this.isSetAdresa();
    boolean that_present_Adresa = true && that.isSetAdresa();
    if (this_present_Adresa || that_present_Adresa) {
      if (!(this_present_Adresa && that_present_Adresa))
        return false;
      if (!this.Adresa.equals(that.Adresa))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ID;

    hashCode = hashCode * 8191 + ((isSetNume()) ? 131071 : 524287);
    if (isSetNume())
      hashCode = hashCode * 8191 + Nume.hashCode();

    hashCode = hashCode * 8191 + ((isSetAdresa()) ? 131071 : 524287);
    if (isSetAdresa())
      hashCode = hashCode * 8191 + Adresa.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Clientulet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetID()).compareTo(other.isSetID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, other.ID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNume()).compareTo(other.isSetNume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Nume, other.Nume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdresa()).compareTo(other.isSetAdresa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdresa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Adresa, other.Adresa);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Clientulet(");
    boolean first = true;

    sb.append("ID:");
    sb.append(this.ID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Nume:");
    if (this.Nume == null) {
      sb.append("null");
    } else {
      sb.append(this.Nume);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Adresa:");
    if (this.Adresa == null) {
      sb.append("null");
    } else {
      sb.append(this.Adresa);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClientuletStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ClientuletStandardScheme getScheme() {
      return new ClientuletStandardScheme();
    }
  }

  private static class ClientuletStandardScheme extends org.apache.thrift.scheme.StandardScheme<Clientulet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Clientulet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ID = iprot.readI32();
              struct.setIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Nume = iprot.readString();
              struct.setNumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ADRESA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Adresa = iprot.readString();
              struct.setAdresaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Clientulet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.ID);
      oprot.writeFieldEnd();
      if (struct.Nume != null) {
        oprot.writeFieldBegin(NUME_FIELD_DESC);
        oprot.writeString(struct.Nume);
        oprot.writeFieldEnd();
      }
      if (struct.Adresa != null) {
        oprot.writeFieldBegin(ADRESA_FIELD_DESC);
        oprot.writeString(struct.Adresa);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClientuletTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ClientuletTupleScheme getScheme() {
      return new ClientuletTupleScheme();
    }
  }

  private static class ClientuletTupleScheme extends org.apache.thrift.scheme.TupleScheme<Clientulet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Clientulet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetID()) {
        optionals.set(0);
      }
      if (struct.isSetNume()) {
        optionals.set(1);
      }
      if (struct.isSetAdresa()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetID()) {
        oprot.writeI32(struct.ID);
      }
      if (struct.isSetNume()) {
        oprot.writeString(struct.Nume);
      }
      if (struct.isSetAdresa()) {
        oprot.writeString(struct.Adresa);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Clientulet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.ID = iprot.readI32();
        struct.setIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Nume = iprot.readString();
        struct.setNumeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Adresa = iprot.readString();
        struct.setAdresaIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

