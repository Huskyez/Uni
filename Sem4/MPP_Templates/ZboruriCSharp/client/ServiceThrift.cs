/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace CSharp
{
  public partial class ServiceThrift {
    public interface ISync {
      void logIn(Angajat angajat);
      void logOut(int port);
      List<Zbor> getZboruri();
      List<ZborDTO> getZboruriCautare(string destinatie, string dataCorecta);
      Clientulet findClient(string nume, string adresa);
      Zbor findZbor(string destinatie, string data, string ora);
      int findIndex();
      void cumparaBilet(Bilet bilet, int ZborId, int locuri);
      void notifyServer();
      void addObserver(int port);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_logIn(AsyncCallback callback, object state, Angajat angajat);
      void End_logIn(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_logOut(AsyncCallback callback, object state, int port);
      void End_logOut(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_getZboruri(AsyncCallback callback, object state);
      List<Zbor> End_getZboruri(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_getZboruriCautare(AsyncCallback callback, object state, string destinatie, string dataCorecta);
      List<ZborDTO> End_getZboruriCautare(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_findClient(AsyncCallback callback, object state, string nume, string adresa);
      Clientulet End_findClient(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_findZbor(AsyncCallback callback, object state, string destinatie, string data, string ora);
      Zbor End_findZbor(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_findIndex(AsyncCallback callback, object state);
      int End_findIndex(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_cumparaBilet(AsyncCallback callback, object state, Bilet bilet, int ZborId, int locuri);
      void End_cumparaBilet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_notifyServer(AsyncCallback callback, object state);
      void End_notifyServer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_addObserver(AsyncCallback callback, object state, int port);
      void End_addObserver(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_logIn(AsyncCallback callback, object state, Angajat angajat)
      {
        return send_logIn(callback, state, angajat);
      }

      public void End_logIn(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_logIn();
      }

      #endif

      public void logIn(Angajat angajat)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_logIn(null, null, angajat);
        End_logIn(asyncResult);

        #else
        send_logIn(angajat);
        recv_logIn();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logIn(AsyncCallback callback, object state, Angajat angajat)
      {
        oprot_.WriteMessageBegin(new TMessage("logIn", TMessageType.Call, seqid_));
        logIn_args args = new logIn_args();
        args.Angajat = angajat;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_logIn(Angajat angajat)
      {
        oprot_.WriteMessageBegin(new TMessage("logIn", TMessageType.Call, seqid_));
        logIn_args args = new logIn_args();
        args.Angajat = angajat;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_logIn()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logIn_result result = new logIn_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_logOut(AsyncCallback callback, object state, int port)
      {
        return send_logOut(callback, state, port);
      }

      public void End_logOut(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_logOut();
      }

      #endif

      public void logOut(int port)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_logOut(null, null, port);
        End_logOut(asyncResult);

        #else
        send_logOut(port);
        recv_logOut();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_logOut(AsyncCallback callback, object state, int port)
      {
        oprot_.WriteMessageBegin(new TMessage("logOut", TMessageType.Call, seqid_));
        logOut_args args = new logOut_args();
        args.Port = port;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_logOut(int port)
      {
        oprot_.WriteMessageBegin(new TMessage("logOut", TMessageType.Call, seqid_));
        logOut_args args = new logOut_args();
        args.Port = port;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_logOut()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        logOut_result result = new logOut_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_getZboruri(AsyncCallback callback, object state)
      {
        return send_getZboruri(callback, state);
      }

      public List<Zbor> End_getZboruri(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getZboruri();
      }

      #endif

      public List<Zbor> getZboruri()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_getZboruri(null, null);
        return End_getZboruri(asyncResult);

        #else
        send_getZboruri();
        return recv_getZboruri();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getZboruri(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("getZboruri", TMessageType.Call, seqid_));
        getZboruri_args args = new getZboruri_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_getZboruri()
      {
        oprot_.WriteMessageBegin(new TMessage("getZboruri", TMessageType.Call, seqid_));
        getZboruri_args args = new getZboruri_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<Zbor> recv_getZboruri()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getZboruri_result result = new getZboruri_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getZboruri failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_getZboruriCautare(AsyncCallback callback, object state, string destinatie, string dataCorecta)
      {
        return send_getZboruriCautare(callback, state, destinatie, dataCorecta);
      }

      public List<ZborDTO> End_getZboruriCautare(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getZboruriCautare();
      }

      #endif

      public List<ZborDTO> getZboruriCautare(string destinatie, string dataCorecta)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_getZboruriCautare(null, null, destinatie, dataCorecta);
        return End_getZboruriCautare(asyncResult);

        #else
        send_getZboruriCautare(destinatie, dataCorecta);
        return recv_getZboruriCautare();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getZboruriCautare(AsyncCallback callback, object state, string destinatie, string dataCorecta)
      {
        oprot_.WriteMessageBegin(new TMessage("getZboruriCautare", TMessageType.Call, seqid_));
        getZboruriCautare_args args = new getZboruriCautare_args();
        args.Destinatie = destinatie;
        args.DataCorecta = dataCorecta;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_getZboruriCautare(string destinatie, string dataCorecta)
      {
        oprot_.WriteMessageBegin(new TMessage("getZboruriCautare", TMessageType.Call, seqid_));
        getZboruriCautare_args args = new getZboruriCautare_args();
        args.Destinatie = destinatie;
        args.DataCorecta = dataCorecta;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<ZborDTO> recv_getZboruriCautare()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getZboruriCautare_result result = new getZboruriCautare_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getZboruriCautare failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_findClient(AsyncCallback callback, object state, string nume, string adresa)
      {
        return send_findClient(callback, state, nume, adresa);
      }

      public Clientulet End_findClient(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findClient();
      }

      #endif

      public Clientulet findClient(string nume, string adresa)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_findClient(null, null, nume, adresa);
        return End_findClient(asyncResult);

        #else
        send_findClient(nume, adresa);
        return recv_findClient();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findClient(AsyncCallback callback, object state, string nume, string adresa)
      {
        oprot_.WriteMessageBegin(new TMessage("findClient", TMessageType.Call, seqid_));
        findClient_args args = new findClient_args();
        args.Nume = nume;
        args.Adresa = adresa;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_findClient(string nume, string adresa)
      {
        oprot_.WriteMessageBegin(new TMessage("findClient", TMessageType.Call, seqid_));
        findClient_args args = new findClient_args();
        args.Nume = nume;
        args.Adresa = adresa;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Clientulet recv_findClient()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findClient_result result = new findClient_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findClient failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_findZbor(AsyncCallback callback, object state, string destinatie, string data, string ora)
      {
        return send_findZbor(callback, state, destinatie, data, ora);
      }

      public Zbor End_findZbor(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findZbor();
      }

      #endif

      public Zbor findZbor(string destinatie, string data, string ora)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_findZbor(null, null, destinatie, data, ora);
        return End_findZbor(asyncResult);

        #else
        send_findZbor(destinatie, data, ora);
        return recv_findZbor();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findZbor(AsyncCallback callback, object state, string destinatie, string data, string ora)
      {
        oprot_.WriteMessageBegin(new TMessage("findZbor", TMessageType.Call, seqid_));
        findZbor_args args = new findZbor_args();
        args.Destinatie = destinatie;
        args.Data = data;
        args.Ora = ora;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_findZbor(string destinatie, string data, string ora)
      {
        oprot_.WriteMessageBegin(new TMessage("findZbor", TMessageType.Call, seqid_));
        findZbor_args args = new findZbor_args();
        args.Destinatie = destinatie;
        args.Data = data;
        args.Ora = ora;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Zbor recv_findZbor()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findZbor_result result = new findZbor_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findZbor failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_findIndex(AsyncCallback callback, object state)
      {
        return send_findIndex(callback, state);
      }

      public int End_findIndex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findIndex();
      }

      #endif

      public int findIndex()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_findIndex(null, null);
        return End_findIndex(asyncResult);

        #else
        send_findIndex();
        return recv_findIndex();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findIndex(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("findIndex", TMessageType.Call, seqid_));
        findIndex_args args = new findIndex_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_findIndex()
      {
        oprot_.WriteMessageBegin(new TMessage("findIndex", TMessageType.Call, seqid_));
        findIndex_args args = new findIndex_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public int recv_findIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findIndex_result result = new findIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findIndex failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_cumparaBilet(AsyncCallback callback, object state, Bilet bilet, int ZborId, int locuri)
      {
        return send_cumparaBilet(callback, state, bilet, ZborId, locuri);
      }

      public void End_cumparaBilet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_cumparaBilet();
      }

      #endif

      public void cumparaBilet(Bilet bilet, int ZborId, int locuri)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_cumparaBilet(null, null, bilet, ZborId, locuri);
        End_cumparaBilet(asyncResult);

        #else
        send_cumparaBilet(bilet, ZborId, locuri);
        recv_cumparaBilet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_cumparaBilet(AsyncCallback callback, object state, Bilet bilet, int ZborId, int locuri)
      {
        oprot_.WriteMessageBegin(new TMessage("cumparaBilet", TMessageType.Call, seqid_));
        cumparaBilet_args args = new cumparaBilet_args();
        args.Bilet = bilet;
        args.ZborId = ZborId;
        args.Locuri = locuri;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_cumparaBilet(Bilet bilet, int ZborId, int locuri)
      {
        oprot_.WriteMessageBegin(new TMessage("cumparaBilet", TMessageType.Call, seqid_));
        cumparaBilet_args args = new cumparaBilet_args();
        args.Bilet = bilet;
        args.ZborId = ZborId;
        args.Locuri = locuri;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_cumparaBilet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cumparaBilet_result result = new cumparaBilet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_notifyServer(AsyncCallback callback, object state)
      {
        return send_notifyServer(callback, state);
      }

      public void End_notifyServer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_notifyServer();
      }

      #endif

      public void notifyServer()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_notifyServer(null, null);
        End_notifyServer(asyncResult);

        #else
        send_notifyServer();
        recv_notifyServer();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_notifyServer(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("notifyServer", TMessageType.Call, seqid_));
        notifyServer_args args = new notifyServer_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_notifyServer()
      {
        oprot_.WriteMessageBegin(new TMessage("notifyServer", TMessageType.Call, seqid_));
        notifyServer_args args = new notifyServer_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_notifyServer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        notifyServer_result result = new notifyServer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_addObserver(AsyncCallback callback, object state, int port)
      {
        return send_addObserver(callback, state, port);
      }

      public void End_addObserver(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addObserver();
      }

      #endif

      public void addObserver(int port)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_addObserver(null, null, port);
        End_addObserver(asyncResult);

        #else
        send_addObserver(port);
        recv_addObserver();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addObserver(AsyncCallback callback, object state, int port)
      {
        oprot_.WriteMessageBegin(new TMessage("addObserver", TMessageType.Call, seqid_));
        addObserver_args args = new addObserver_args();
        args.Port = port;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_addObserver(int port)
      {
        oprot_.WriteMessageBegin(new TMessage("addObserver", TMessageType.Call, seqid_));
        addObserver_args args = new addObserver_args();
        args.Port = port;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_addObserver()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addObserver_result result = new addObserver_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["logIn"] = logIn_Process;
        processMap_["logOut"] = logOut_Process;
        processMap_["getZboruri"] = getZboruri_Process;
        processMap_["getZboruriCautare"] = getZboruriCautare_Process;
        processMap_["findClient"] = findClient_Process;
        processMap_["findZbor"] = findZbor_Process;
        processMap_["findIndex"] = findIndex_Process;
        processMap_["cumparaBilet"] = cumparaBilet_Process;
        processMap_["notifyServer"] = notifyServer_Process;
        processMap_["addObserver"] = addObserver_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void logIn_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logIn_args args = new logIn_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logIn_result result = new logIn_result();
        try
        {
          iface_.logIn(args.Angajat);
          oprot.WriteMessageBegin(new TMessage("logIn", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("logIn", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void logOut_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        logOut_args args = new logOut_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        logOut_result result = new logOut_result();
        try
        {
          iface_.logOut(args.Port);
          oprot.WriteMessageBegin(new TMessage("logOut", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("logOut", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getZboruri_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getZboruri_args args = new getZboruri_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getZboruri_result result = new getZboruri_result();
        try
        {
          result.Success = iface_.getZboruri();
          oprot.WriteMessageBegin(new TMessage("getZboruri", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getZboruri", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getZboruriCautare_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getZboruriCautare_args args = new getZboruriCautare_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getZboruriCautare_result result = new getZboruriCautare_result();
        try
        {
          result.Success = iface_.getZboruriCautare(args.Destinatie, args.DataCorecta);
          oprot.WriteMessageBegin(new TMessage("getZboruriCautare", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getZboruriCautare", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findClient_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findClient_args args = new findClient_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findClient_result result = new findClient_result();
        try
        {
          result.Success = iface_.findClient(args.Nume, args.Adresa);
          oprot.WriteMessageBegin(new TMessage("findClient", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("findClient", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findZbor_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findZbor_args args = new findZbor_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findZbor_result result = new findZbor_result();
        try
        {
          result.Success = iface_.findZbor(args.Destinatie, args.Data, args.Ora);
          oprot.WriteMessageBegin(new TMessage("findZbor", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("findZbor", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findIndex_args args = new findIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findIndex_result result = new findIndex_result();
        try
        {
          result.Success = iface_.findIndex();
          oprot.WriteMessageBegin(new TMessage("findIndex", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("findIndex", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cumparaBilet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cumparaBilet_args args = new cumparaBilet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cumparaBilet_result result = new cumparaBilet_result();
        try
        {
          iface_.cumparaBilet(args.Bilet, args.ZborId, args.Locuri);
          oprot.WriteMessageBegin(new TMessage("cumparaBilet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("cumparaBilet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void notifyServer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        notifyServer_args args = new notifyServer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        notifyServer_result result = new notifyServer_result();
        try
        {
          iface_.notifyServer();
          oprot.WriteMessageBegin(new TMessage("notifyServer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("notifyServer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addObserver_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addObserver_args args = new addObserver_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addObserver_result result = new addObserver_result();
        try
        {
          iface_.addObserver(args.Port);
          oprot.WriteMessageBegin(new TMessage("addObserver", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("addObserver", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logIn_args : TBase
    {
      private Angajat _angajat;

      public Angajat Angajat
      {
        get
        {
          return _angajat;
        }
        set
        {
          __isset.angajat = true;
          this._angajat = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool angajat;
      }

      public logIn_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Angajat = new Angajat();
                  Angajat.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("logIn_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Angajat != null && __isset.angajat) {
            field.Name = "angajat";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Angajat.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logIn_args(");
        bool __first = true;
        if (Angajat != null && __isset.angajat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Angajat: ");
          __sb.Append(Angajat== null ? "<null>" : Angajat.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logIn_result : TBase
    {

      public logIn_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("logIn_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logIn_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logOut_args : TBase
    {
      private int _port;

      public int Port
      {
        get
        {
          return _port;
        }
        set
        {
          __isset.port = true;
          this._port = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool port;
      }

      public logOut_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Port = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("logOut_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.port) {
            field.Name = "port";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Port);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logOut_args(");
        bool __first = true;
        if (__isset.port) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Port: ");
          __sb.Append(Port);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class logOut_result : TBase
    {

      public logOut_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("logOut_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("logOut_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getZboruri_args : TBase
    {

      public getZboruri_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getZboruri_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getZboruri_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getZboruri_result : TBase
    {
      private List<Zbor> _success;

      public List<Zbor> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getZboruri_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Zbor>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      Zbor _elem2;
                      _elem2 = new Zbor();
                      _elem2.Read(iprot);
                      Success.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getZboruri_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Zbor _iter3 in Success)
                {
                  _iter3.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getZboruri_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getZboruriCautare_args : TBase
    {
      private string _destinatie;
      private string _dataCorecta;

      public string Destinatie
      {
        get
        {
          return _destinatie;
        }
        set
        {
          __isset.destinatie = true;
          this._destinatie = value;
        }
      }

      public string DataCorecta
      {
        get
        {
          return _dataCorecta;
        }
        set
        {
          __isset.dataCorecta = true;
          this._dataCorecta = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool destinatie;
        public bool dataCorecta;
      }

      public getZboruriCautare_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Destinatie = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  DataCorecta = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getZboruriCautare_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Destinatie != null && __isset.destinatie) {
            field.Name = "destinatie";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Destinatie);
            oprot.WriteFieldEnd();
          }
          if (DataCorecta != null && __isset.dataCorecta) {
            field.Name = "dataCorecta";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DataCorecta);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getZboruriCautare_args(");
        bool __first = true;
        if (Destinatie != null && __isset.destinatie) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Destinatie: ");
          __sb.Append(Destinatie);
        }
        if (DataCorecta != null && __isset.dataCorecta) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DataCorecta: ");
          __sb.Append(DataCorecta);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getZboruriCautare_result : TBase
    {
      private List<ZborDTO> _success;

      public List<ZborDTO> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getZboruriCautare_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<ZborDTO>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      ZborDTO _elem6;
                      _elem6 = new ZborDTO();
                      _elem6.Read(iprot);
                      Success.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getZboruriCautare_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (ZborDTO _iter7 in Success)
                {
                  _iter7.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getZboruriCautare_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findClient_args : TBase
    {
      private string _nume;
      private string _adresa;

      public string Nume
      {
        get
        {
          return _nume;
        }
        set
        {
          __isset.nume = true;
          this._nume = value;
        }
      }

      public string Adresa
      {
        get
        {
          return _adresa;
        }
        set
        {
          __isset.adresa = true;
          this._adresa = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool nume;
        public bool adresa;
      }

      public findClient_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Nume = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Adresa = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findClient_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Nume != null && __isset.nume) {
            field.Name = "nume";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Nume);
            oprot.WriteFieldEnd();
          }
          if (Adresa != null && __isset.adresa) {
            field.Name = "adresa";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Adresa);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findClient_args(");
        bool __first = true;
        if (Nume != null && __isset.nume) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Nume: ");
          __sb.Append(Nume);
        }
        if (Adresa != null && __isset.adresa) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Adresa: ");
          __sb.Append(Adresa);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findClient_result : TBase
    {
      private Clientulet _success;

      public Clientulet Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public findClient_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Clientulet();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findClient_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findClient_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findZbor_args : TBase
    {
      private string _destinatie;
      private string _data;
      private string _ora;

      public string Destinatie
      {
        get
        {
          return _destinatie;
        }
        set
        {
          __isset.destinatie = true;
          this._destinatie = value;
        }
      }

      public string Data
      {
        get
        {
          return _data;
        }
        set
        {
          __isset.data = true;
          this._data = value;
        }
      }

      public string Ora
      {
        get
        {
          return _ora;
        }
        set
        {
          __isset.ora = true;
          this._ora = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool destinatie;
        public bool data;
        public bool ora;
      }

      public findZbor_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Destinatie = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Data = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Ora = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findZbor_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Destinatie != null && __isset.destinatie) {
            field.Name = "destinatie";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Destinatie);
            oprot.WriteFieldEnd();
          }
          if (Data != null && __isset.data) {
            field.Name = "data";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Data);
            oprot.WriteFieldEnd();
          }
          if (Ora != null && __isset.ora) {
            field.Name = "ora";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ora);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findZbor_args(");
        bool __first = true;
        if (Destinatie != null && __isset.destinatie) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Destinatie: ");
          __sb.Append(Destinatie);
        }
        if (Data != null && __isset.data) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Data: ");
          __sb.Append(Data);
        }
        if (Ora != null && __isset.ora) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ora: ");
          __sb.Append(Ora);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findZbor_result : TBase
    {
      private Zbor _success;

      public Zbor Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public findZbor_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Zbor();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findZbor_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findZbor_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findIndex_args : TBase
    {

      public findIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findIndex_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findIndex_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findIndex_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public findIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findIndex_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findIndex_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cumparaBilet_args : TBase
    {
      private Bilet _bilet;
      private int _ZborId;
      private int _locuri;

      public Bilet Bilet
      {
        get
        {
          return _bilet;
        }
        set
        {
          __isset.bilet = true;
          this._bilet = value;
        }
      }

      public int ZborId
      {
        get
        {
          return _ZborId;
        }
        set
        {
          __isset.ZborId = true;
          this._ZborId = value;
        }
      }

      public int Locuri
      {
        get
        {
          return _locuri;
        }
        set
        {
          __isset.locuri = true;
          this._locuri = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bilet;
        public bool ZborId;
        public bool locuri;
      }

      public cumparaBilet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Bilet = new Bilet();
                  Bilet.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  ZborId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Locuri = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cumparaBilet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Bilet != null && __isset.bilet) {
            field.Name = "bilet";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Bilet.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.ZborId) {
            field.Name = "ZborId";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ZborId);
            oprot.WriteFieldEnd();
          }
          if (__isset.locuri) {
            field.Name = "locuri";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Locuri);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cumparaBilet_args(");
        bool __first = true;
        if (Bilet != null && __isset.bilet) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Bilet: ");
          __sb.Append(Bilet== null ? "<null>" : Bilet.ToString());
        }
        if (__isset.ZborId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ZborId: ");
          __sb.Append(ZborId);
        }
        if (__isset.locuri) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Locuri: ");
          __sb.Append(Locuri);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cumparaBilet_result : TBase
    {

      public cumparaBilet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cumparaBilet_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cumparaBilet_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyServer_args : TBase
    {

      public notifyServer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("notifyServer_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("notifyServer_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyServer_result : TBase
    {

      public notifyServer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("notifyServer_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("notifyServer_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addObserver_args : TBase
    {
      private int _port;

      public int Port
      {
        get
        {
          return _port;
        }
        set
        {
          __isset.port = true;
          this._port = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool port;
      }

      public addObserver_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Port = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addObserver_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.port) {
            field.Name = "port";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Port);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addObserver_args(");
        bool __first = true;
        if (__isset.port) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Port: ");
          __sb.Append(Port);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addObserver_result : TBase
    {

      public addObserver_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("addObserver_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("addObserver_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
